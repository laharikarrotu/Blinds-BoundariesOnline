# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions
# More info on Python, GitHub Actions, and Azure App Service: https://aka.ms/python-webapps-actions

name: Build and deploy Python app to Azure Web App - blinds-boundaries-api

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read #This is required for actions/checkout

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Upgrade pip and setuptools
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade setuptools wheel build
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt --no-cache-dir
          
      - name: Download AI models (with robust fallbacks)
        run: |
          # Create models directory
          mkdir -p models
          
          # Download SAM model (1.2GB) with timeout and retry - SKIP IF TOO SLOW
          echo "Attempting to download SAM model (may take 10+ minutes)..."
          echo "If this takes too long, the deployment will continue without SAM"
          
          # Set a reasonable timeout for SAM download
          timeout 600 bash -c '
            for i in {1..2}; do
              echo "SAM download attempt $i..."
              if curl -L --max-time 300 -o models/sam_vit_l_0b3195.pth https://dl.fbaipublicfiles.com/segment_anything/sam_vit_l_0b3195.pth; then
                echo "✅ SAM model downloaded successfully on attempt $i"
                exit 0
              else
                echo "⚠️ SAM model download failed on attempt $i"
                if [ $i -eq 2 ]; then
                  echo "❌ SAM model download failed - continuing without SAM"
                  rm -f models/sam_vit_l_0b3195.pth
                  exit 0
                fi
              fi
            done
          ' || {
            echo "⚠️ SAM download timed out - continuing without SAM"
            rm -f models/sam_vit_l_0b3195.pth
          }
          
          # Download YOLOv8 model (much smaller, more reliable)
          echo "Downloading YOLOv8 model..."
          timeout 300 bash -c '
            if python -c "from ultralytics import YOLO; model = YOLO(\"yolov8n.pt\"); print(\"YOLOv8 model ready\")"; then
              echo "✅ YOLOv8 model downloaded successfully"
            else
              echo "⚠️ YOLOv8 model download failed - continuing without YOLOv8"
            fi
          ' || echo "⚠️ YOLOv8 download timed out - continuing without YOLOv8"
          
          echo "AI models download completed!"
          ls -lh models/ 2>/dev/null || echo "No models directory found"
        
      # Optional: Add step to run tests here (PyTest, Django test suites, etc.)
      - name: Run tests (optional)
        run: |
          echo "Running basic health checks..."
          python -c "import fastapi; print('FastAPI imported successfully')"
          python -c "import cv2; print('OpenCV imported successfully')"
          python -c "import azure.storage.blob; print('Azure Storage imported successfully')"
          python -c "import multipart; print('python-multipart imported successfully')"
          
          echo "Running AI-Enhanced health checks (with fallbacks)..."
          python -c "import torch; print('PyTorch imported successfully')" || echo "⚠️ PyTorch import failed - will use fallback"
          python -c "import segment_anything; print('SAM imported successfully')" || echo "⚠️ SAM import failed - will use fallback"
          python -c "from ultralytics import YOLO; print('YOLOv8 imported successfully')" || echo "⚠️ YOLOv8 import failed - will use fallback"
          python -c "import transformers; print('Transformers imported successfully')" || echo "⚠️ Transformers import failed - will use fallback"
          
          echo "Testing core dependencies..."
          python -c "import cv2; print('OpenCV imported successfully')"
          python -c "import azure.cognitiveservices.vision.computervision; print('Azure Vision imported successfully')"
          python -c "import google.generativeai; print('Google Generative AI imported successfully')"
          
          echo "Testing AI-Enhanced detector initialization..."
          python -c "from app.ai_enhanced_detector import AIEnhancedWindowDetector; print('AI-Enhanced detector imported successfully')" || echo "⚠️ AI-Enhanced detector import failed - will use hybrid fallback"

      - name: Create deployment package
        run: |
          # Create a clean deployment directory
          mkdir -p deployment
          
          # Copy root-level files (Azure expects these in root)
          cp main.py deployment/ 2>/dev/null || echo "main.py not found in root"
          cp startup.py deployment/ 2>/dev/null || echo "startup.py not found in root"
          cp startup.sh deployment/ 2>/dev/null || echo "startup.sh not found in root"
          cp requirements.txt deployment/ 2>/dev/null || echo "requirements.txt not found in root"
          # Copy configuration files
          cp azure.yaml deployment/ 2>/dev/null || echo "azure.yaml not found in root"
          
          # Copy app directory contents (your main FastAPI application) - FLATTENED
          if [ -d "app" ]; then
                      # Copy all AI-Enhanced files
          cp app/*.py deployment/ 2>/dev/null || echo "No Python files in app directory"
          echo "Copied all app files including AI-Enhanced detectors"
            
            # List what was copied
            echo "Files copied from app directory:"
            ls -la deployment/*.py 2>/dev/null || echo "No Python files found"
          else
            echo "app directory not found"
          fi
          
          # Copy static assets and models
          if [ -d "blinds" ]; then
            cp -r blinds deployment/
            echo "Copied blinds directory"
          elif [ -d "app/blinds" ]; then
            cp -r app/blinds deployment/
            echo "Copied app/blinds directory"
          else
            echo "blinds directory not found"
          fi
          
          if [ -d "models" ]; then
            cp -r models deployment/
            echo "Copied models directory"
            echo "Models included:"
            ls -lh models/
          else
            echo "models directory not found"
          fi
          
          # Create necessary directories for runtime (empty, no files)
          mkdir -p deployment/uploads deployment/masks deployment/results
          # Add .gitkeep files to ensure directories are created
          touch deployment/uploads/.gitkeep
          touch deployment/masks/.gitkeep
          touch deployment/results/.gitkeep
          
          # Make startup script executable
          chmod +x deployment/startup.sh 2>/dev/null || echo "startup.sh not found"
          
          # List what we're deploying
          echo "=== Files to be deployed ==="
          find deployment -type f | head -20
          echo "..."
          
          # Test the deployment package structure (with fallbacks)
          echo "=== Testing deployment package ==="
          cd deployment
          echo "Python files in deployment:"
          ls -la *.py 2>/dev/null || echo "No Python files found"
          echo "Testing import of main_hybrid.py..."
          python -c "import main_hybrid; print('✅ main_hybrid.py imports successfully')" || echo "⚠️ main_hybrid.py import failed - will use fallback"
          
          # Test core functionality
          echo "Testing core imports..."
          python -c "import hybrid_detector; print('✅ hybrid_detector imports successfully')" || echo "⚠️ hybrid_detector import failed"
          python -c "import blind_pattern_generator; print('✅ blind_pattern_generator imports successfully')" || echo "⚠️ blind_pattern_generator import failed"
          
          cd ..
          
          # Zip the deployment directory
          cd deployment
          zip -r ../release.zip ./*
          cd ..
          
          echo "=== Deployment package created ==="
          ls -lh release.zip

      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout
    # Add concurrency to prevent parallel deployments
    concurrency:
      group: production_environment
      cancel-in-progress: true

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: python-app

      - name: Unzip artifact for deployment
        run: |
          unzip release.zip
          echo "=== Deployed files ==="
          ls -la
          echo "=== App directory contents ==="
          ls -la app/ 2>/dev/null || echo "No app directory found"

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_35AB600D43D74C60ADA2AC4E65A0CE8D }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_276A866638E34B1B8C84C7D98077FC2B }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_3005D1EF01714D65931D987B4E4C731A }}

      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        timeout-minutes: 30
        with:
          app-name: 'blinds-boundaries-api'
          slot-name: 'Production'
        # Add retry logic for 409 conflicts
        continue-on-error: true
      
      - name: 'Retry deployment if failed'
        if: steps.deploy-to-webapp.outcome == 'failure'
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'blinds-boundaries-api'
          slot-name: 'Production'
          
      - name: Verify deployment
        run: |
          echo "Deployment completed successfully!"
          echo "Your app should be available at: https://blinds-boundaries-api-dbewbmh4bjdsc6ht.canadacentral-01.azurewebsites.net" 