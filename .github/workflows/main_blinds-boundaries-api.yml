# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions
# More info on Python, GitHub Actions, and Azure App Service: https://aka.ms/python-webapps-actions

name: Build and deploy Python app to Azure Web App - blinds-boundaries-api

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read #This is required for actions/checkout

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Create and start virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate
      
      - name: Install dependencies
        run: pip install -r requirements.txt
        
      - name: Run health checks
        run: |
          echo "Running health checks..."
          python -c "import fastapi; print('✅ FastAPI imported successfully')"
          python -c "import cv2; print('✅ OpenCV imported successfully')"
          python -c "import azure.storage.blob; print('✅ Azure Storage imported successfully')"
          python -c "import google.generativeai; print('✅ Google AI imported successfully')"
          
          echo "Testing core components..."
          python -c "from app.hybrid_detector import HybridWindowDetector; print('✅ Hybrid detector imported successfully')"
          python -c "from app.realistic_blind_generator import RealisticBlindGenerator; print('✅ Realistic blind generator imported successfully')"
          python -c "from app.blind_pattern_generator import BlindPatternGenerator; print('✅ Blind pattern generator imported successfully')"
          
          echo "Testing main app..."
          python -c "import app.main_hybrid; print('✅ Main app imported successfully')"

      - name: Ensure blinds directory exists
        run: |
          mkdir -p blinds
          echo "Blinds directory ready for deployment"
          
      - name: Clean up unnecessary files before upload
        run: |
          echo "Cleaning up files to reduce artifact size..."
          # Remove development files
          rm -rf frontend/node_modules
          rm -rf frontend/.vite
          rm -rf frontend/dist
          rm -rf node_modules
          rm -rf .git
          rm -rf .github
          rm -rf __pycache__
          rm -rf app/__pycache__
          rm -rf uploads/*
          rm -rf masks/*
          rm -rf results/*
          rm -rf models/*
          rm -f manual_deployment.zip
          rm -f deploy-manual.py
          rm -f startup.sh
          echo "Cleanup completed"
          
      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: |
            app/
            main.py
            requirements.txt
            azure.yaml
            startup.py
            blinds/
            .env
          retention-days: 1
          
  deploy:
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: python-app
      
      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: 'blinds-boundaries-api'
          slot-name: 'Production'
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_CCC4DB30401C446B8B09CE2F2265AE23 }}
          
  cleanup:
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: always()
    
    steps:
      - name: Clean up old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const { data: artifacts } = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            const oldArtifacts = artifacts.filter(artifact => 
              artifact.name === 'python-app' && 
              new Date(artifact.created_at) < new Date(Date.now() - 24 * 60 * 60 * 1000) // Older than 24 hours
            );
            
            for (const artifact of oldArtifacts) {
              try {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id
                });
                console.log(`Deleted old artifact: ${artifact.name} (${artifact.id})`);
              } catch (error) {
                console.log(`Failed to delete artifact ${artifact.id}: ${error.message}`);
              }
            } 